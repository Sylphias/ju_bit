module alu_addr8 (
    input op [4],
    input a [8],
    input b [8],
    output z,
    output v,
    output n,    
    output c [8]
  ) {
  
  sig t[16];// for holding result due to potential overflow
  sig d[8]; // for calculating z, v, n
  
  always {
    // choose arithmetic operation
    case ( op ) {
      0:
        t = a + b;
      1:
        t = a - b;
      2:
        t = a * b;
      4:
        t = (a*b)>>8;
      default:
        t = 0;
    }
    d = a - b;
    
    // compresses result into 1 bit with OR, so z is low if any bit is high
    z = ~(|d);
    
    // overflow if sign bit of operands are same (XNOR) and sign bit
    // of result is different (XOR) from sign bit of operands
    v = ( a[7] ~^ b[7] ) & ( d[7] ^ a[7] );
    
    // sign bit
    n = d[7];
    
    // truncate result
    c = t[7:0];
  }
}
