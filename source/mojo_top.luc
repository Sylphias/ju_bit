module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    .rst(rst) {
      //game game;
      test_alu8 tester(.auto(c{io_dip[2][7], io_button[1]}), .opi(io_dip[2][5:0]), .inp(io_dip[1:0]));
      opcode_display op_dis (.good(tester.g), .ds(c{tester.correct,7b0}), .op(tester.op));
    }
  }
  
  alu8 alu(.op(tester.op), .a(tester.in[1]), .b(tester.in[0]));
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits

    // ALU Test
    tester.out = alu.c;
    io_seg = op_dis.seg;
    io_sel = op_dis.sel;
    led = c{alu.z,alu.v,alu.n,5b0};
    io_led = {tester.in[1], tester.in[0], alu.c};
    
    // Game
    //game.butts[7:2] = io_dip[0][7:2];
    //game.butts[1:0] = io_button[1:0];
    //led = game.ts;
    //io_led[2:1] = {game.leds[15:8], game.leds[7:0]};
  }
}